# -*- coding: utf-8 -*-
"""Python - Capstone Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z9_-oZfDme17CSI_uAPpMcAZ6fvTbnhL
"""

import random   # it’s used to generate a random 6-digit OTP.
import smtplib  # It is used to send email via the Simple Mail Transfer Protocol (SMTP)
from email.mime.text import MIMEText
# used to create MIME objects to represent email content as plain text
# MIMEText used to represent the body of an email message as plain text.
# Why is MIMEText Important? for Email Formatting & Compatibility
# MIME (Multipurpose Internet Mail Extensions) is a standard for
# formatting non-text email content (like images, audio, and other binary data),
# but in this case, it's used for plain text.
from email.mime.multipart import MIMEMultipart  # which is used to create a container email that can contain multiple MIME objects
def generate_otp(): # defined function to generate random no between 100000 to 99999
    return random.randint(100000, 999999)

def send_otp_via_email(receiver_email, otp):
    sender_email = "nirmalbirla460@gmail.com" # receipents email
    sender_password = "rjku oqfg ohxx ucyk"   # for this we used gmail app password data,for that we did few setups in gmail application to get it

    subject = "Your OTP Code"
    body = f"Your OTP code is {otp}. Please do not share this code with anyone."

    message = MIMEMultipart() # Creates a MIMEMultipart object, which is a container for the email content.
    message["From"] = sender_email
    message["To"] = receiver_email
    message["Subject"] = subject

    message.attach(MIMEText(body, "plain"))
    # This attaches the body of the email to the message as plain text.
    try:
        # Connecting to the Gmail SMTP server
        server = smtplib.SMTP("smtp.gmail.com", 587) #This is a class from Python’s smtplib module,
        #which is used for creating a connection to an SMTP server. SMTP is the protocol used to send email messages between servers
        #587 is port number on the Gmail SMTP server that is used for communication over TLS (Transport Layer Security)
        server.starttls() #This initiates the TLS encryption for the email session, ensuring that the connection is secure.
        server.login(sender_email, sender_password) #This logs in to the Gmail account using the provided email address and password.
        server.sendmail(sender_email, receiver_email, message.as_string()) #
        server.close() # once the email sent it Closes the connection to the SMTP server.
        print(f"OTP has been sent to {receiver_email}")
    except Exception as e: #If an error occurs, it prints a failure message and the error details.
        print("Failed to send OTP. Please check your email configuration.")
        print("Error:", e)

# Function to prompt user to enter the OTP
def prompt_for_otp():
    return input("Enter the OTP you received: ") #Prompts the user to enter the OTP they received and returns their input as a string.

# Function to verify if the entered OTP matches the generated OTP
def verify_otp(generated_otp, entered_otp): #Compares the entered OTP with the generated OTP to check if they match.
    return str(generated_otp) == entered_otp #If they match, it returns True; otherwise, it returns False.

# Main function to run the OTP verification system
def otp_verification_system(): # main function
    receiver_email = input("Enter your email address: ")  #Prompts the user to enter their email address.
    generated_otp = generate_otp()  #Generates a random 6-digit OTP.

    # Simulate sending the OTP via email
    send_otp_via_email(receiver_email, generated_otp)  #Sends the OTP to the user's email address.

    # Allow the user up to 3 attempts to enter the correct OTP
    for attempt in range(3):
        entered_otp = prompt_for_otp()  #Prompts the user to enter the OTP.
        if verify_otp(generated_otp, entered_otp):  #Compares the entered OTP with the generated OTP.
            print("OTP verified successfully! Access granted.")  #If they match, it prints a success message.
            return
        else:
            print("Incorrect OTP. Please try again.")  #If they don't match, it prints an error message.

    print("Maximum attempts reached. Access denied.")  #If the user fails to enter the correct OTP after 3 attempts, it prints a failure message.

if __name__ == "__main__":
    otp_verification_system()

